// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PokerAPIClient is the client API for PokerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PokerAPIClient interface {
	GetGame(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*GetGameResponse, error)
}

type pokerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPokerAPIClient(cc grpc.ClientConnInterface) PokerAPIClient {
	return &pokerAPIClient{cc}
}

func (c *pokerAPIClient) GetGame(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*GetGameResponse, error) {
	out := new(GetGameResponse)
	err := c.cc.Invoke(ctx, "/poker.v1alpha1.PokerAPI/GetGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PokerAPIServer is the server API for PokerAPI service.
// All implementations must embed UnimplementedPokerAPIServer
// for forward compatibility
type PokerAPIServer interface {
	GetGame(context.Context, *GetGameRequest) (*GetGameResponse, error)
	mustEmbedUnimplementedPokerAPIServer()
}

// UnimplementedPokerAPIServer must be embedded to have forward compatible implementations.
type UnimplementedPokerAPIServer struct {
}

func (UnimplementedPokerAPIServer) GetGame(context.Context, *GetGameRequest) (*GetGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGame not implemented")
}
func (UnimplementedPokerAPIServer) mustEmbedUnimplementedPokerAPIServer() {}

// UnsafePokerAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PokerAPIServer will
// result in compilation errors.
type UnsafePokerAPIServer interface {
	mustEmbedUnimplementedPokerAPIServer()
}

func RegisterPokerAPIServer(s grpc.ServiceRegistrar, srv PokerAPIServer) {
	s.RegisterService(&PokerAPI_ServiceDesc, srv)
}

func _PokerAPI_GetGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerAPIServer).GetGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.v1alpha1.PokerAPI/GetGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerAPIServer).GetGame(ctx, req.(*GetGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PokerAPI_ServiceDesc is the grpc.ServiceDesc for PokerAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PokerAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "poker.v1alpha1.PokerAPI",
	HandlerType: (*PokerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGame",
			Handler:    _PokerAPI_GetGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/poker.proto",
}
